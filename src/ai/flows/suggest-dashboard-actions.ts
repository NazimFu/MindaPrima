// This file is generated by Firebase Genkit.
'use server';

/**
 * @fileOverview A dashboard action suggestion AI agent.
 *
 * - suggestDashboardActions - A function that suggests dashboard actions based on app usage and data patterns.
 * - SuggestDashboardActionsInput - The input type for the suggestDashboardActions function.
 * - SuggestDashboardActionsOutput - The return type for the suggestDashboardActions function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestDashboardActionsInputSchema = z.object({
  recentAppUsage: z
    .string()
    .describe('A description of the recent app usage, including actions performed and data accessed.'),
  dataPatterns: z
    .string()
    .describe('A description of the data patterns observed in the app, such as student enrollment trends or payment statuses.'),
});
export type SuggestDashboardActionsInput = z.infer<typeof SuggestDashboardActionsInputSchema>;

const SuggestDashboardActionsOutputSchema = z.object({
  suggestedActions: z
    .array(z.string())
    .describe('A list of suggested actions for the dashboard user, based on recent app usage and data patterns.'),
});
export type SuggestDashboardActionsOutput = z.infer<typeof SuggestDashboardActionsOutputSchema>;

export async function suggestDashboardActions(input: SuggestDashboardActionsInput): Promise<SuggestDashboardActionsOutput> {
  return suggestDashboardActionsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestDashboardActionsPrompt',
  input: {schema: SuggestDashboardActionsInputSchema},
  output: {schema: SuggestDashboardActionsOutputSchema},
  prompt: `You are an AI assistant that suggests actions for a dashboard user based on recent app usage and data patterns.

  Recent App Usage: {{{recentAppUsage}}}
  Data Patterns: {{{dataPatterns}}}

  Based on this information, suggest a list of actions the user can take to efficiently manage student and teacher information, and invoice generation.
  Format your suggestions as a numbered list of strings.
  `,config: {
    safetySettings: [
      {
        category: 'HARM_CATEGORY_HATE_SPEECH',
        threshold: 'BLOCK_ONLY_HIGH',
      },
      {
        category: 'HARM_CATEGORY_DANGEROUS_CONTENT',
        threshold: 'BLOCK_NONE',
      },
      {
        category: 'HARM_CATEGORY_HARASSMENT',
        threshold: 'BLOCK_MEDIUM_AND_ABOVE',
      },
      {
        category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
        threshold: 'BLOCK_LOW_AND_ABOVE',
      },
    ],
  },
});

const suggestDashboardActionsFlow = ai.defineFlow(
  {
    name: 'suggestDashboardActionsFlow',
    inputSchema: SuggestDashboardActionsInputSchema,
    outputSchema: SuggestDashboardActionsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
